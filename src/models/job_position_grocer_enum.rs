/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum JobPositionGrocerEnum {
    #[serde(rename = "Bagboy")]
    Bagboy,
    #[serde(rename = "Price Labeler")]
    PriceLabeler,
    #[serde(rename = "Cashier")]
    Cashier,
    #[serde(rename = "Food Delivery")]
    FoodDelivery,
    #[serde(rename = "Manager")]
    Manager,

}

impl std::fmt::Display for JobPositionGrocerEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Bagboy => write!(f, "Bagboy"),
            Self::PriceLabeler => write!(f, "Price Labeler"),
            Self::Cashier => write!(f, "Cashier"),
            Self::FoodDelivery => write!(f, "Food Delivery"),
            Self::Manager => write!(f, "Manager"),
        }
    }
}

impl Default for JobPositionGrocerEnum {
    fn default() -> JobPositionGrocerEnum {
        Self::Bagboy
    }
}

