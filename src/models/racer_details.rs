/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RacerDetails {
    #[serde(rename = "driver_id", skip_serializing_if = "Option::is_none")]
    pub driver_id: Option<i32>,
    #[serde(rename = "position", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub position: Option<Option<i32>>,
    #[serde(rename = "car_id", skip_serializing_if = "Option::is_none")]
    pub car_id: Option<i32>,
    #[serde(rename = "car_item_id", skip_serializing_if = "Option::is_none")]
    pub car_item_id: Option<i32>,
    #[serde(rename = "car_item_name", skip_serializing_if = "Option::is_none")]
    pub car_item_name: Option<String>,
    #[serde(rename = "car_class", skip_serializing_if = "Option::is_none")]
    pub car_class: Option<models::RaceClassEnum>,
    #[serde(rename = "has_crashed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub has_crashed: Option<Option<bool>>,
    #[serde(rename = "best_lap_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub best_lap_time: Option<Option<f32>>,
    #[serde(rename = "race_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub race_time: Option<Option<f32>>,
    #[serde(rename = "time_ended", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub time_ended: Option<Option<i32>>,
}

impl RacerDetails {
    pub fn new() -> RacerDetails {
        RacerDetails {
            driver_id: None,
            position: None,
            car_id: None,
            car_item_id: None,
            car_item_name: None,
            car_class: None,
            has_crashed: None,
            best_lap_time: None,
            race_time: None,
            time_ended: None,
        }
    }
}

