/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserCrimeAttempts {
    #[serde(rename = "total", skip_serializing_if = "Option::is_none")]
    pub total: Option<i32>,
    #[serde(rename = "success", skip_serializing_if = "Option::is_none")]
    pub success: Option<i32>,
    #[serde(rename = "fail", skip_serializing_if = "Option::is_none")]
    pub fail: Option<i32>,
    #[serde(rename = "critical_fail", skip_serializing_if = "Option::is_none")]
    pub critical_fail: Option<i32>,
    #[serde(rename = "subcrimes", skip_serializing_if = "Option::is_none")]
    pub subcrimes: Option<Vec<models::UserSubcrime>>,
}

impl UserCrimeAttempts {
    pub fn new() -> UserCrimeAttempts {
        UserCrimeAttempts {
            total: None,
            success: None,
            fail: None,
            critical_fail: None,
            subcrimes: None,
        }
    }
}

