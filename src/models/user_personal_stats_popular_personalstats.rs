/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserPersonalStatsPopularPersonalstats {
    #[serde(rename = "attacking", skip_serializing_if = "Option::is_none")]
    pub attacking: Option<Box<models::PersonalStatsAttackingPopularAttacking>>,
    #[serde(rename = "jobs", skip_serializing_if = "Option::is_none")]
    pub jobs: Option<Box<models::PersonalStatsJobsPublicJobs>>,
    #[serde(rename = "hospital", skip_serializing_if = "Option::is_none")]
    pub hospital: Option<Box<models::PersonalStatsHospitalPopularHospital>>,
    #[serde(rename = "criminal_offenses", skip_serializing_if = "Option::is_none")]
    pub criminal_offenses: Option<Box<models::PersonalStatsCriminalOffensesPopularCriminalOffenses>>,
    #[serde(rename = "crimes", skip_serializing_if = "Option::is_none")]
    pub crimes: Option<Box<models::PersonalStatsCriminalOffensesPopularCriminalOffenses>>,
    #[serde(rename = "items", skip_serializing_if = "Option::is_none")]
    pub items: Option<Box<models::PersonalStatsItemsPopularItems>>,
    #[serde(rename = "travel", skip_serializing_if = "Option::is_none")]
    pub travel: Option<Box<models::PersonalStatsTravelPopularTravel>>,
    #[serde(rename = "drugs", skip_serializing_if = "Option::is_none")]
    pub drugs: Option<Box<models::PersonalStatsDrugsDrugs>>,
    #[serde(rename = "networth", skip_serializing_if = "Option::is_none")]
    pub networth: Option<Box<models::PersonalStatsNetworthPublicNetworth>>,
    #[serde(rename = "other", skip_serializing_if = "Option::is_none")]
    pub other: Option<Box<models::PersonalStatsOtherPopularOther>>,
}

impl UserPersonalStatsPopularPersonalstats {
    pub fn new() -> UserPersonalStatsPopularPersonalstats {
        UserPersonalStatsPopularPersonalstats {
            attacking: None,
            jobs: None,
            hospital: None,
            criminal_offenses: None,
            crimes: None,
            items: None,
            travel: None,
            drugs: None,
            networth: None,
            other: None,
        }
    }
}

