/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserHofStats {
    #[serde(rename = "attacks", skip_serializing_if = "Option::is_none")]
    pub attacks: Option<Box<models::HofValue>>,
    #[serde(rename = "busts", skip_serializing_if = "Option::is_none")]
    pub busts: Option<Box<models::HofValue>>,
    #[serde(rename = "defends", skip_serializing_if = "Option::is_none")]
    pub defends: Option<Box<models::HofValue>>,
    #[serde(rename = "networth", skip_serializing_if = "Option::is_none")]
    pub networth: Option<Box<models::HofValue>>,
    #[serde(rename = "offences", skip_serializing_if = "Option::is_none")]
    pub offences: Option<Box<models::HofValue>>,
    #[serde(rename = "revives", skip_serializing_if = "Option::is_none")]
    pub revives: Option<Box<models::HofValue>>,
    #[serde(rename = "level", skip_serializing_if = "Option::is_none")]
    pub level: Option<Box<models::HofValue>>,
    #[serde(rename = "rank", skip_serializing_if = "Option::is_none")]
    pub rank: Option<Box<models::HofValue>>,
    #[serde(rename = "awards", skip_serializing_if = "Option::is_none")]
    pub awards: Option<Box<models::HofValue>>,
    #[serde(rename = "racing_skill", skip_serializing_if = "Option::is_none")]
    pub racing_skill: Option<Box<models::HofValue>>,
    #[serde(rename = "racing_points", skip_serializing_if = "Option::is_none")]
    pub racing_points: Option<Box<models::HofValue>>,
    #[serde(rename = "racing_wins", skip_serializing_if = "Option::is_none")]
    pub racing_wins: Option<Box<models::HofValue>>,
    #[serde(rename = "travel_time", skip_serializing_if = "Option::is_none")]
    pub travel_time: Option<Box<models::HofValue>>,
    #[serde(rename = "working_stats", skip_serializing_if = "Option::is_none")]
    pub working_stats: Option<Box<models::HofValue>>,
    #[serde(rename = "battle_stats", skip_serializing_if = "Option::is_none")]
    pub battle_stats: Option<Box<models::UserHofStatsBattleStats>>,
}

impl UserHofStats {
    pub fn new() -> UserHofStats {
        UserHofStats {
            attacks: None,
            busts: None,
            defends: None,
            networth: None,
            offences: None,
            revives: None,
            level: None,
            rank: None,
            awards: None,
            racing_skill: None,
            racing_points: None,
            racing_wins: None,
            travel_time: None,
            working_stats: None,
            battle_stats: None,
        }
    }
}

