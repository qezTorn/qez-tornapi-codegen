/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserGet200Response {
    #[serde(rename = "crimes", skip_serializing_if = "Option::is_none")]
    pub crimes: Option<Box<models::UserCrime>>,
    #[serde(rename = "races", skip_serializing_if = "Option::is_none")]
    pub races: Option<Vec<models::RacingRaceDetailsResponse>>,
    #[serde(rename = "_metadata", skip_serializing_if = "Option::is_none")]
    pub _metadata: Option<Box<models::RequestMetadataWithLinks>>,
    #[serde(rename = "enlistedcars", skip_serializing_if = "Option::is_none")]
    pub enlistedcars: Option<Vec<models::UserRaceCarDetails>>,
    #[serde(rename = "forumPosts", skip_serializing_if = "Option::is_none")]
    pub forum_posts: Option<Vec<models::ForumPost>>,
    #[serde(rename = "forumThreads", skip_serializing_if = "Option::is_none")]
    pub forum_threads: Option<Vec<models::ForumThreadUserExtended>>,
    #[serde(rename = "forumSubscribedThreads", skip_serializing_if = "Option::is_none")]
    pub forum_subscribed_threads: Option<Vec<models::ForumSubscribedThread>>,
    #[serde(rename = "forumFeed", skip_serializing_if = "Option::is_none")]
    pub forum_feed: Option<Vec<models::ForumFeed>>,
    #[serde(rename = "forumFriends", skip_serializing_if = "Option::is_none")]
    pub forum_friends: Option<Vec<models::ForumFeed>>,
    #[serde(rename = "hof", skip_serializing_if = "Option::is_none")]
    pub hof: Option<Vec<models::UserHofStats>>,
    #[serde(rename = "calendar", skip_serializing_if = "Option::is_none")]
    pub calendar: Option<Box<models::UserCalendar>>,
    #[serde(rename = "bounties", skip_serializing_if = "Option::is_none")]
    pub bounties: Option<Vec<models::Bounty>>,
    #[serde(rename = "jobranks", skip_serializing_if = "Option::is_none")]
    pub jobranks: Option<Box<models::UserJobRanks>>,
    #[serde(rename = "itemmarket", skip_serializing_if = "Option::is_none")]
    pub itemmarket: Option<Vec<models::UserItemMarketListing>>,
    #[serde(rename = "personalstats", skip_serializing_if = "Option::is_none")]
    pub personalstats: Option<Vec<models::PersonalStatsHistoricStat>>,
    #[serde(rename = "selections", skip_serializing_if = "Option::is_none")]
    pub selections: Option<Vec<models::UserSelectionName>>,
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i32>,
}

impl UserGet200Response {
    pub fn new() -> UserGet200Response {
        UserGet200Response {
            crimes: None,
            races: None,
            _metadata: None,
            enlistedcars: None,
            forum_posts: None,
            forum_threads: None,
            forum_subscribed_threads: None,
            forum_feed: None,
            forum_friends: None,
            hof: None,
            calendar: None,
            bounties: None,
            jobranks: None,
            itemmarket: None,
            personalstats: None,
            selections: None,
            timestamp: None,
        }
    }
}

