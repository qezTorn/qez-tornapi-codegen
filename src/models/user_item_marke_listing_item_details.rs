/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserItemMarkeListingItemDetails {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "rarity", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rarity: Option<Option<Rarity>>,
    #[serde(rename = "uid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub uid: Option<Option<i32>>,
    #[serde(rename = "stats", skip_serializing_if = "Option::is_none")]
    pub stats: Option<Box<models::UserItemMarkeListingItemDetailsStats>>,
    #[serde(rename = "bonuses", skip_serializing_if = "Option::is_none")]
    pub bonuses: Option<Vec<models::ItemMarketListingItemBonus>>,
}

impl UserItemMarkeListingItemDetails {
    pub fn new() -> UserItemMarkeListingItemDetails {
        UserItemMarkeListingItemDetails {
            id: None,
            name: None,
            r#type: None,
            rarity: None,
            uid: None,
            stats: None,
            bonuses: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Rarity {
    #[serde(rename = "yellow")]
    Yellow,
    #[serde(rename = "orange")]
    Orange,
    #[serde(rename = "red")]
    Red,
}

impl Default for Rarity {
    fn default() -> Rarity {
        Self::Yellow
    }
}

