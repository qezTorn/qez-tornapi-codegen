/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FactionAttackResult {
    #[serde(rename = "None")]
    None,
    #[serde(rename = "Attacked")]
    Attacked,
    #[serde(rename = "Mugged")]
    Mugged,
    #[serde(rename = "Hospitalized")]
    Hospitalized,
    #[serde(rename = "Arrested")]
    Arrested,
    #[serde(rename = "Looted")]
    Looted,
    #[serde(rename = "Lost")]
    Lost,
    #[serde(rename = "Stalemate")]
    Stalemate,
    #[serde(rename = "Assist")]
    Assist,
    #[serde(rename = "Escape")]
    Escape,
    #[serde(rename = "Timeout")]
    Timeout,
    #[serde(rename = "Special")]
    Special,
    #[serde(rename = "Bounty")]
    Bounty,
    #[serde(rename = "Interrupted")]
    Interrupted,

}

impl std::fmt::Display for FactionAttackResult {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::None => write!(f, "None"),
            Self::Attacked => write!(f, "Attacked"),
            Self::Mugged => write!(f, "Mugged"),
            Self::Hospitalized => write!(f, "Hospitalized"),
            Self::Arrested => write!(f, "Arrested"),
            Self::Looted => write!(f, "Looted"),
            Self::Lost => write!(f, "Lost"),
            Self::Stalemate => write!(f, "Stalemate"),
            Self::Assist => write!(f, "Assist"),
            Self::Escape => write!(f, "Escape"),
            Self::Timeout => write!(f, "Timeout"),
            Self::Special => write!(f, "Special"),
            Self::Bounty => write!(f, "Bounty"),
            Self::Interrupted => write!(f, "Interrupted"),
        }
    }
}

impl Default for FactionAttackResult {
    fn default() -> FactionAttackResult {
        Self::None
    }
}

