/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FactionNewsCategory {
    #[serde(rename = "main")]
    Main,
    #[serde(rename = "attack")]
    Attack,
    #[serde(rename = "armoryDeposit")]
    ArmoryDeposit,
    #[serde(rename = "armoryAction")]
    ArmoryAction,
    #[serde(rename = "territoryWar")]
    TerritoryWar,
    #[serde(rename = "rankedWar")]
    RankedWar,
    #[serde(rename = "territoryGain")]
    TerritoryGain,
    #[serde(rename = "chain")]
    Chain,
    #[serde(rename = "crime")]
    Crime,
    #[serde(rename = "membership")]
    Membership,
    #[serde(rename = "depositFunds")]
    DepositFunds,
    #[serde(rename = "giveFunds")]
    GiveFunds,

}

impl std::fmt::Display for FactionNewsCategory {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Main => write!(f, "main"),
            Self::Attack => write!(f, "attack"),
            Self::ArmoryDeposit => write!(f, "armoryDeposit"),
            Self::ArmoryAction => write!(f, "armoryAction"),
            Self::TerritoryWar => write!(f, "territoryWar"),
            Self::RankedWar => write!(f, "rankedWar"),
            Self::TerritoryGain => write!(f, "territoryGain"),
            Self::Chain => write!(f, "chain"),
            Self::Crime => write!(f, "crime"),
            Self::Membership => write!(f, "membership"),
            Self::DepositFunds => write!(f, "depositFunds"),
            Self::GiveFunds => write!(f, "giveFunds"),
        }
    }
}

impl Default for FactionNewsCategory {
    fn default() -> FactionNewsCategory {
        Self::Main
    }
}

