/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FactionGet200Response {
    #[serde(rename = "hof", skip_serializing_if = "Option::is_none")]
    pub hof: Option<Vec<models::FactionHofStats>>,
    #[serde(rename = "members", skip_serializing_if = "Option::is_none")]
    pub members: Option<Vec<models::FactionMember>>,
    #[serde(rename = "basic", skip_serializing_if = "Option::is_none")]
    pub basic: Option<Box<models::FactionBasic>>,
    #[serde(rename = "pacts", skip_serializing_if = "Option::is_none")]
    pub pacts: Option<Vec<models::FactionPact>>,
    #[serde(rename = "wars", skip_serializing_if = "Option::is_none")]
    pub wars: Option<Box<models::FactionWars>>,
    #[serde(rename = "news", skip_serializing_if = "Option::is_none")]
    pub news: Option<Vec<models::FactionNews>>,
    #[serde(rename = "_metadata", skip_serializing_if = "Option::is_none")]
    pub _metadata: Option<Box<models::RequestMetadataWithLinks>>,
    #[serde(rename = "attacks", skip_serializing_if = "Option::is_none")]
    pub attacks: Option<Vec<models::AttackSimplified>>,
    #[serde(rename = "applications", skip_serializing_if = "Option::is_none")]
    pub applications: Option<Vec<models::FactionApplication>>,
    #[serde(rename = "chain", skip_serializing_if = "Option::is_none")]
    pub chain: Option<Box<models::FactionOngoingChain>>,
    #[serde(rename = "chains", skip_serializing_if = "Option::is_none")]
    pub chains: Option<Vec<models::FactionChain>>,
    #[serde(rename = "chainreport", skip_serializing_if = "Option::is_none")]
    pub chainreport: Option<Box<models::FactionChainReport>>,
    #[serde(rename = "crimes", skip_serializing_if = "Option::is_none")]
    pub crimes: Option<Vec<models::FactionCrime>>,
    #[serde(rename = "selections", skip_serializing_if = "Option::is_none")]
    pub selections: Option<Vec<models::FactionSelectionName>>,
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i32>,
}

impl FactionGet200Response {
    pub fn new() -> FactionGet200Response {
        FactionGet200Response {
            hof: None,
            members: None,
            basic: None,
            pacts: None,
            wars: None,
            news: None,
            _metadata: None,
            attacks: None,
            applications: None,
            chain: None,
            chains: None,
            chainreport: None,
            crimes: None,
            selections: None,
            timestamp: None,
        }
    }
}

