/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum JobPositionLawEnum {
    #[serde(rename = "Law Student")]
    LawStudent,
    #[serde(rename = "Paralegal")]
    Paralegal,
    #[serde(rename = "Probate Lawyer")]
    ProbateLawyer,
    #[serde(rename = "Trial Lawyer")]
    TrialLawyer,
    #[serde(rename = "Circuit Court Judge")]
    CircuitCourtJudge,
    #[serde(rename = "Federal Judge")]
    FederalJudge,

}

impl std::fmt::Display for JobPositionLawEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::LawStudent => write!(f, "Law Student"),
            Self::Paralegal => write!(f, "Paralegal"),
            Self::ProbateLawyer => write!(f, "Probate Lawyer"),
            Self::TrialLawyer => write!(f, "Trial Lawyer"),
            Self::CircuitCourtJudge => write!(f, "Circuit Court Judge"),
            Self::FederalJudge => write!(f, "Federal Judge"),
        }
    }
}

impl Default for JobPositionLawEnum {
    fn default() -> JobPositionLawEnum {
        Self::LawStudent
    }
}

