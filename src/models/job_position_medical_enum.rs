/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum JobPositionMedicalEnum {
    #[serde(rename = "Medical Student")]
    MedicalStudent,
    #[serde(rename = "Houseman")]
    Houseman,
    #[serde(rename = "Senior Houseman")]
    SeniorHouseman,
    #[serde(rename = "GP")]
    Gp,
    #[serde(rename = "Consultant")]
    Consultant,
    #[serde(rename = "Surgeon")]
    Surgeon,
    #[serde(rename = "Brain Surgeon")]
    BrainSurgeon,

}

impl std::fmt::Display for JobPositionMedicalEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::MedicalStudent => write!(f, "Medical Student"),
            Self::Houseman => write!(f, "Houseman"),
            Self::SeniorHouseman => write!(f, "Senior Houseman"),
            Self::Gp => write!(f, "GP"),
            Self::Consultant => write!(f, "Consultant"),
            Self::Surgeon => write!(f, "Surgeon"),
            Self::BrainSurgeon => write!(f, "Brain Surgeon"),
        }
    }
}

impl Default for JobPositionMedicalEnum {
    fn default() -> JobPositionMedicalEnum {
        Self::MedicalStudent
    }
}

