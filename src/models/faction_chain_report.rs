/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FactionChainReport {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "faction_id", skip_serializing_if = "Option::is_none")]
    pub faction_id: Option<i32>,
    #[serde(rename = "start", skip_serializing_if = "Option::is_none")]
    pub start: Option<i32>,
    #[serde(rename = "end", skip_serializing_if = "Option::is_none")]
    pub end: Option<i32>,
    #[serde(rename = "details", skip_serializing_if = "Option::is_none")]
    pub details: Option<Box<models::FactionChainReportDetails>>,
    #[serde(rename = "bonuses", skip_serializing_if = "Option::is_none")]
    pub bonuses: Option<Vec<models::FactionChainReportBonus>>,
    #[serde(rename = "attackers", skip_serializing_if = "Option::is_none")]
    pub attackers: Option<Vec<models::FactionChainReportAttacker>>,
    #[serde(rename = "non-attackers", skip_serializing_if = "Option::is_none")]
    pub non_attackers: Option<Vec<i32>>,
}

impl FactionChainReport {
    pub fn new() -> FactionChainReport {
        FactionChainReport {
            id: None,
            faction_id: None,
            start: None,
            end: None,
            details: None,
            bonuses: None,
            attackers: None,
            non_attackers: None,
        }
    }
}

