/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RacingGet200Response {
    #[serde(rename = "races", skip_serializing_if = "Option::is_none")]
    pub races: Option<Vec<models::Race>>,
    #[serde(rename = "_metadata", skip_serializing_if = "Option::is_none")]
    pub _metadata: Option<Box<models::RequestMetadataWithLinks>>,
    #[serde(rename = "records", skip_serializing_if = "Option::is_none")]
    pub records: Option<Vec<models::RaceRecord>>,
    #[serde(rename = "results", skip_serializing_if = "Option::is_none")]
    pub results: Option<Vec<models::RacerDetails>>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "track_id", skip_serializing_if = "Option::is_none")]
    pub track_id: Option<i32>,
    #[serde(rename = "creator_id", skip_serializing_if = "Option::is_none")]
    pub creator_id: Option<i32>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<models::RaceStatusEnum>,
    #[serde(rename = "laps", skip_serializing_if = "Option::is_none")]
    pub laps: Option<i32>,
    #[serde(rename = "participants", skip_serializing_if = "Option::is_none")]
    pub participants: Option<Box<models::RaceParticipants>>,
    #[serde(rename = "schedule", skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Box<models::RaceSchedule>>,
    #[serde(rename = "requirements", skip_serializing_if = "Option::is_none")]
    pub requirements: Option<Box<models::RaceRequirements>>,
    #[serde(rename = "cars", skip_serializing_if = "Option::is_none")]
    pub cars: Option<Vec<models::RaceCar>>,
    #[serde(rename = "tracks", skip_serializing_if = "Option::is_none")]
    pub tracks: Option<Vec<models::RaceTrack>>,
    #[serde(rename = "carupgrades", skip_serializing_if = "Option::is_none")]
    pub carupgrades: Option<Vec<models::RaceCarUpgrade>>,
    #[serde(rename = "selections", skip_serializing_if = "Option::is_none")]
    pub selections: Option<Vec<models::RacingSelectionName>>,
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i32>,
}

impl RacingGet200Response {
    pub fn new() -> RacingGet200Response {
        RacingGet200Response {
            races: None,
            _metadata: None,
            records: None,
            results: None,
            id: None,
            title: None,
            track_id: None,
            creator_id: None,
            status: None,
            laps: None,
            participants: None,
            schedule: None,
            requirements: None,
            cars: None,
            tracks: None,
            carupgrades: None,
            selections: None,
            timestamp: None,
        }
    }
}

