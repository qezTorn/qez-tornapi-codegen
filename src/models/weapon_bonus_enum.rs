/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WeaponBonusEnum {
    #[serde(rename = "Any")]
    Any,
    #[serde(rename = "Double")]
    Double,
    #[serde(rename = "Yellow")]
    Yellow,
    #[serde(rename = "Orange")]
    Orange,
    #[serde(rename = "Red")]
    Red,
    #[serde(rename = "Achilles")]
    Achilles,
    #[serde(rename = "Assassinate")]
    Assassinate,
    #[serde(rename = "Backstab")]
    Backstab,
    #[serde(rename = "Berserk")]
    Berserk,
    #[serde(rename = "Bleed")]
    Bleed,
    #[serde(rename = "Blindfire")]
    Blindfire,
    #[serde(rename = "Blindside")]
    Blindside,
    #[serde(rename = "Bloodlust")]
    Bloodlust,
    #[serde(rename = "Burn")]
    Burn,
    #[serde(rename = "Comeback")]
    Comeback,
    #[serde(rename = "Conserve")]
    Conserve,
    #[serde(rename = "Cripple")]
    Cripple,
    #[serde(rename = "Crusher")]
    Crusher,
    #[serde(rename = "Cupid")]
    Cupid,
    #[serde(rename = "Deadeye")]
    Deadeye,
    #[serde(rename = "Deadly")]
    Deadly,
    #[serde(rename = "Demoralize")]
    Demoralize,
    #[serde(rename = "Disarm")]
    Disarm,
    #[serde(rename = "Double-edged")]
    DoubleEdged,
    #[serde(rename = "Double Tap")]
    DoubleTap,
    #[serde(rename = "Emasculate")]
    Emasculate,
    #[serde(rename = "Empower")]
    Empower,
    #[serde(rename = "Eviscerate")]
    Eviscerate,
    #[serde(rename = "Execute")]
    Execute,
    #[serde(rename = "Expose")]
    Expose,
    #[serde(rename = "Finale")]
    Finale,
    #[serde(rename = "Focus")]
    Focus,
    #[serde(rename = "Freeze")]
    Freeze,
    #[serde(rename = "Frenzy")]
    Frenzy,
    #[serde(rename = "Fury")]
    Fury,
    #[serde(rename = "Grace")]
    Grace,
    #[serde(rename = "Hazardous")]
    Hazardous,
    #[serde(rename = "Home run")]
    HomeRun,
    #[serde(rename = "Irradiate")]
    Irradiate,
    #[serde(rename = "Lacerate")]
    Lacerate,
    #[serde(rename = "Motivation")]
    Motivation,
    #[serde(rename = "Paralyze")]
    Paralyze,
    #[serde(rename = "Parry")]
    Parry,
    #[serde(rename = "Penetrate")]
    Penetrate,
    #[serde(rename = "Plunder")]
    Plunder,
    #[serde(rename = "Poison")]
    Poison,
    #[serde(rename = "Powerful")]
    Powerful,
    #[serde(rename = "Proficience")]
    Proficience,
    #[serde(rename = "Puncture")]
    Puncture,
    #[serde(rename = "Quicken")]
    Quicken,
    #[serde(rename = "Rage")]
    Rage,
    #[serde(rename = "Revitalize")]
    Revitalize,
    #[serde(rename = "Roshambo")]
    Roshambo,
    #[serde(rename = "Shock")]
    Shock,
    #[serde(rename = "Sleep")]
    Sleep,
    #[serde(rename = "Slow")]
    Slow,
    #[serde(rename = "Smash")]
    Smash,
    #[serde(rename = "Smurf")]
    Smurf,
    #[serde(rename = "Specialist")]
    Specialist,
    #[serde(rename = "Spray")]
    Spray,
    #[serde(rename = "Storage")]
    Storage,
    #[serde(rename = "Stricken")]
    Stricken,
    #[serde(rename = "Stun")]
    Stun,
    #[serde(rename = "Suppress")]
    Suppress,
    #[serde(rename = "Sure Shot")]
    SureShot,
    #[serde(rename = "Throttle")]
    Throttle,
    #[serde(rename = "Toxin")]
    Toxin,
    #[serde(rename = "Warlord")]
    Warlord,
    #[serde(rename = "Weaken")]
    Weaken,
    #[serde(rename = "Wind-up")]
    WindUp,
    #[serde(rename = "Wither")]
    Wither,

}

impl std::fmt::Display for WeaponBonusEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Any => write!(f, "Any"),
            Self::Double => write!(f, "Double"),
            Self::Yellow => write!(f, "Yellow"),
            Self::Orange => write!(f, "Orange"),
            Self::Red => write!(f, "Red"),
            Self::Achilles => write!(f, "Achilles"),
            Self::Assassinate => write!(f, "Assassinate"),
            Self::Backstab => write!(f, "Backstab"),
            Self::Berserk => write!(f, "Berserk"),
            Self::Bleed => write!(f, "Bleed"),
            Self::Blindfire => write!(f, "Blindfire"),
            Self::Blindside => write!(f, "Blindside"),
            Self::Bloodlust => write!(f, "Bloodlust"),
            Self::Burn => write!(f, "Burn"),
            Self::Comeback => write!(f, "Comeback"),
            Self::Conserve => write!(f, "Conserve"),
            Self::Cripple => write!(f, "Cripple"),
            Self::Crusher => write!(f, "Crusher"),
            Self::Cupid => write!(f, "Cupid"),
            Self::Deadeye => write!(f, "Deadeye"),
            Self::Deadly => write!(f, "Deadly"),
            Self::Demoralize => write!(f, "Demoralize"),
            Self::Disarm => write!(f, "Disarm"),
            Self::DoubleEdged => write!(f, "Double-edged"),
            Self::DoubleTap => write!(f, "Double Tap"),
            Self::Emasculate => write!(f, "Emasculate"),
            Self::Empower => write!(f, "Empower"),
            Self::Eviscerate => write!(f, "Eviscerate"),
            Self::Execute => write!(f, "Execute"),
            Self::Expose => write!(f, "Expose"),
            Self::Finale => write!(f, "Finale"),
            Self::Focus => write!(f, "Focus"),
            Self::Freeze => write!(f, "Freeze"),
            Self::Frenzy => write!(f, "Frenzy"),
            Self::Fury => write!(f, "Fury"),
            Self::Grace => write!(f, "Grace"),
            Self::Hazardous => write!(f, "Hazardous"),
            Self::HomeRun => write!(f, "Home run"),
            Self::Irradiate => write!(f, "Irradiate"),
            Self::Lacerate => write!(f, "Lacerate"),
            Self::Motivation => write!(f, "Motivation"),
            Self::Paralyze => write!(f, "Paralyze"),
            Self::Parry => write!(f, "Parry"),
            Self::Penetrate => write!(f, "Penetrate"),
            Self::Plunder => write!(f, "Plunder"),
            Self::Poison => write!(f, "Poison"),
            Self::Powerful => write!(f, "Powerful"),
            Self::Proficience => write!(f, "Proficience"),
            Self::Puncture => write!(f, "Puncture"),
            Self::Quicken => write!(f, "Quicken"),
            Self::Rage => write!(f, "Rage"),
            Self::Revitalize => write!(f, "Revitalize"),
            Self::Roshambo => write!(f, "Roshambo"),
            Self::Shock => write!(f, "Shock"),
            Self::Sleep => write!(f, "Sleep"),
            Self::Slow => write!(f, "Slow"),
            Self::Smash => write!(f, "Smash"),
            Self::Smurf => write!(f, "Smurf"),
            Self::Specialist => write!(f, "Specialist"),
            Self::Spray => write!(f, "Spray"),
            Self::Storage => write!(f, "Storage"),
            Self::Stricken => write!(f, "Stricken"),
            Self::Stun => write!(f, "Stun"),
            Self::Suppress => write!(f, "Suppress"),
            Self::SureShot => write!(f, "Sure Shot"),
            Self::Throttle => write!(f, "Throttle"),
            Self::Toxin => write!(f, "Toxin"),
            Self::Warlord => write!(f, "Warlord"),
            Self::Weaken => write!(f, "Weaken"),
            Self::WindUp => write!(f, "Wind-up"),
            Self::Wither => write!(f, "Wither"),
        }
    }
}

impl Default for WeaponBonusEnum {
    fn default() -> WeaponBonusEnum {
        Self::Any
    }
}

