/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ForumPost {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "thread_id", skip_serializing_if = "Option::is_none")]
    pub thread_id: Option<i32>,
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<Box<models::ForumThreadAuthor>>,
    /// Indicates whether post was made using the old formatting engine which doesn't use HTML.
    #[serde(rename = "is_legacy", skip_serializing_if = "Option::is_none")]
    pub is_legacy: Option<bool>,
    #[serde(rename = "is_topic", skip_serializing_if = "Option::is_none")]
    pub is_topic: Option<bool>,
    #[serde(rename = "is_edited", skip_serializing_if = "Option::is_none")]
    pub is_edited: Option<bool>,
    #[serde(rename = "is_pinned", skip_serializing_if = "Option::is_none")]
    pub is_pinned: Option<bool>,
    #[serde(rename = "created_time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<i32>,
    #[serde(rename = "edited_by", skip_serializing_if = "Option::is_none")]
    pub edited_by: Option<i32>,
    #[serde(rename = "has_quote", skip_serializing_if = "Option::is_none")]
    pub has_quote: Option<bool>,
    /// 'quoted_post_id' is null when 'has_quote' is false.
    #[serde(rename = "quoted_post_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub quoted_post_id: Option<Option<i32>>,
    /// depending on the input 'cat' parameter, this will either return raw value (with HTML) or plain text. Legacy posts are returned as is, they can't be stripped of tags.
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(rename = "likes", skip_serializing_if = "Option::is_none")]
    pub likes: Option<i32>,
    #[serde(rename = "dislikes", skip_serializing_if = "Option::is_none")]
    pub dislikes: Option<i32>,
}

impl ForumPost {
    pub fn new() -> ForumPost {
        ForumPost {
            id: None,
            thread_id: None,
            author: None,
            is_legacy: None,
            is_topic: None,
            is_edited: None,
            is_pinned: None,
            created_time: None,
            edited_by: None,
            has_quote: None,
            quoted_post_id: None,
            content: None,
            likes: None,
            dislikes: None,
        }
    }
}

