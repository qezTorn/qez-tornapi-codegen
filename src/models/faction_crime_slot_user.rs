/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FactionCrimeSlotUser : Details about the user joined the slot, if any.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FactionCrimeSlotUser {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The timestamp at which the user joined the slot.
    #[serde(rename = "joined_at", skip_serializing_if = "Option::is_none")]
    pub joined_at: Option<i32>,
    /// Current planning progress on the slot.
    #[serde(rename = "progress", skip_serializing_if = "Option::is_none")]
    pub progress: Option<i32>,
}

impl FactionCrimeSlotUser {
    /// Details about the user joined the slot, if any.
    pub fn new() -> FactionCrimeSlotUser {
        FactionCrimeSlotUser {
            id: None,
            joined_at: None,
            progress: None,
        }
    }
}

