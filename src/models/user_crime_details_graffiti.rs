/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserCrimeDetailsGraffiti {
    #[serde(rename = "cans_used", skip_serializing_if = "Option::is_none")]
    pub cans_used: Option<i32>,
    #[serde(rename = "most_graffiti_in_one_area", skip_serializing_if = "Option::is_none")]
    pub most_graffiti_in_one_area: Option<i32>,
    #[serde(rename = "most_graffiti_simultaneously", skip_serializing_if = "Option::is_none")]
    pub most_graffiti_simultaneously: Option<i32>,
    #[serde(rename = "graffiti_removed", skip_serializing_if = "Option::is_none")]
    pub graffiti_removed: Option<i32>,
    #[serde(rename = "cost_to_city", skip_serializing_if = "Option::is_none")]
    pub cost_to_city: Option<i32>,
}

impl UserCrimeDetailsGraffiti {
    pub fn new() -> UserCrimeDetailsGraffiti {
        UserCrimeDetailsGraffiti {
            cans_used: None,
            most_graffiti_in_one_area: None,
            most_graffiti_simultaneously: None,
            graffiti_removed: None,
            cost_to_city: None,
        }
    }
}

