/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FactionCrimeSlotItemRequirement : Details of item required for the slot, if applicable.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FactionCrimeSlotItemRequirement {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Shows if the item is reusable or consumed during the crime.
    #[serde(rename = "is_reusable", skip_serializing_if = "Option::is_none")]
    pub is_reusable: Option<bool>,
    /// Shows if user has the required item.
    #[serde(rename = "is_available", skip_serializing_if = "Option::is_none")]
    pub is_available: Option<bool>,
}

impl FactionCrimeSlotItemRequirement {
    /// Details of item required for the slot, if applicable.
    pub fn new() -> FactionCrimeSlotItemRequirement {
        FactionCrimeSlotItemRequirement {
            id: None,
            is_reusable: None,
            is_available: None,
        }
    }
}

