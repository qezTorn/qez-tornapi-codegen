/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// UserCrimeMiscellaneous :  Miscellaneous stats for specific crime. Results differ based on the cat id.
///  Miscellaneous stats for specific crime. Results differ based on the cat id.
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UserCrimeMiscellaneous {
    UserCrimeDetailsBootlegging(Box<models::UserCrimeDetailsBootlegging>),
    UserCrimeDetailsGraffiti(Box<models::UserCrimeDetailsGraffiti>),
    UserCrimeDetailsShoplifting(Box<models::UserCrimeDetailsShoplifting>),
    UserCrimeDetailsCardSkimming(Box<models::UserCrimeDetailsCardSkimming>),
    UserCrimeDetailsHustling(Box<models::UserCrimeDetailsHustling>),
    UserCrimeDetailsCracking(Box<models::UserCrimeDetailsCracking>),
    UserCrimeDetailsScamming(Box<models::UserCrimeDetailsScamming>),
}

impl Default for UserCrimeMiscellaneous {
    fn default() -> Self {
        Self::UserCrimeDetailsBootlegging(Default::default())
    }
}

