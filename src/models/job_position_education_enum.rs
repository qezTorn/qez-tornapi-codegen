/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum JobPositionEducationEnum {
    #[serde(rename = "Recess Supervisor")]
    RecessSupervisor,
    #[serde(rename = "Substitute Teacher")]
    SubstituteTeacher,
    #[serde(rename = "Elementary Teacher")]
    ElementaryTeacher,
    #[serde(rename = "Secondary Teacher")]
    SecondaryTeacher,
    #[serde(rename = "Professor")]
    Professor,
    #[serde(rename = "Vice-Principal")]
    VicePrincipal,
    #[serde(rename = "Principal")]
    Principal,

}

impl std::fmt::Display for JobPositionEducationEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::RecessSupervisor => write!(f, "Recess Supervisor"),
            Self::SubstituteTeacher => write!(f, "Substitute Teacher"),
            Self::ElementaryTeacher => write!(f, "Elementary Teacher"),
            Self::SecondaryTeacher => write!(f, "Secondary Teacher"),
            Self::Professor => write!(f, "Professor"),
            Self::VicePrincipal => write!(f, "Vice-Principal"),
            Self::Principal => write!(f, "Principal"),
        }
    }
}

impl Default for JobPositionEducationEnum {
    fn default() -> JobPositionEducationEnum {
        Self::RecessSupervisor
    }
}

