/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RaceCarUpgradeCategory {
    #[serde(rename = "Aerodynamics")]
    Aerodynamics,
    #[serde(rename = "Brakes")]
    Brakes,
    #[serde(rename = "Engine")]
    Engine,
    #[serde(rename = "Exhaust and Induction")]
    ExhaustAndInduction,
    #[serde(rename = "Fuel")]
    Fuel,
    #[serde(rename = "Safety")]
    Safety,
    #[serde(rename = "Suspension")]
    Suspension,
    #[serde(rename = "Transmission")]
    Transmission,
    #[serde(rename = "Weight Reduction")]
    WeightReduction,
    #[serde(rename = "Wheels and Tyres")]
    WheelsAndTyres,

}

impl std::fmt::Display for RaceCarUpgradeCategory {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Aerodynamics => write!(f, "Aerodynamics"),
            Self::Brakes => write!(f, "Brakes"),
            Self::Engine => write!(f, "Engine"),
            Self::ExhaustAndInduction => write!(f, "Exhaust and Induction"),
            Self::Fuel => write!(f, "Fuel"),
            Self::Safety => write!(f, "Safety"),
            Self::Suspension => write!(f, "Suspension"),
            Self::Transmission => write!(f, "Transmission"),
            Self::WeightReduction => write!(f, "Weight Reduction"),
            Self::WheelsAndTyres => write!(f, "Wheels and Tyres"),
        }
    }
}

impl Default for RaceCarUpgradeCategory {
    fn default() -> RaceCarUpgradeCategory {
        Self::Aerodynamics
    }
}

