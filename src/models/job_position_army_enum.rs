/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum JobPositionArmyEnum {
    #[serde(rename = "Private")]
    Private,
    #[serde(rename = "Corporal")]
    Corporal,
    #[serde(rename = "Sergeant")]
    Sergeant,
    #[serde(rename = "Master Sergeant")]
    MasterSergeant,
    #[serde(rename = "Warrant Officer")]
    WarrantOfficer,
    #[serde(rename = "Lieutenant")]
    Lieutenant,
    #[serde(rename = "Major")]
    Major,
    #[serde(rename = "Colonel")]
    Colonel,
    #[serde(rename = "Brigadier")]
    Brigadier,
    #[serde(rename = "General")]
    General,

}

impl std::fmt::Display for JobPositionArmyEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Private => write!(f, "Private"),
            Self::Corporal => write!(f, "Corporal"),
            Self::Sergeant => write!(f, "Sergeant"),
            Self::MasterSergeant => write!(f, "Master Sergeant"),
            Self::WarrantOfficer => write!(f, "Warrant Officer"),
            Self::Lieutenant => write!(f, "Lieutenant"),
            Self::Major => write!(f, "Major"),
            Self::Colonel => write!(f, "Colonel"),
            Self::Brigadier => write!(f, "Brigadier"),
            Self::General => write!(f, "General"),
        }
    }
}

impl Default for JobPositionArmyEnum {
    fn default() -> JobPositionArmyEnum {
        Self::Private
    }
}

