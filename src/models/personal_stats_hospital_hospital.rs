/*
 * Torn API
 *
 *   * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PersonalStatsHospitalHospital {
    #[serde(rename = "times_hospitalized", skip_serializing_if = "Option::is_none")]
    pub times_hospitalized: Option<i32>,
    #[serde(rename = "medical_items_used", skip_serializing_if = "Option::is_none")]
    pub medical_items_used: Option<i32>,
    #[serde(rename = "blood_withdrawn", skip_serializing_if = "Option::is_none")]
    pub blood_withdrawn: Option<i32>,
    #[serde(rename = "reviving", skip_serializing_if = "Option::is_none")]
    pub reviving: Option<Box<models::PersonalStatsHospitalHospitalReviving>>,
}

impl PersonalStatsHospitalHospital {
    pub fn new() -> PersonalStatsHospitalHospital {
        PersonalStatsHospitalHospital {
            times_hospitalized: None,
            medical_items_used: None,
            blood_withdrawn: None,
            reviving: None,
        }
    }
}

